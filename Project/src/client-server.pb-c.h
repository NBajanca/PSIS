/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_client_2dserver_2eproto__INCLUDED
#define PROTOBUF_C_client_2dserver_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _LOGIN LOGIN;
typedef struct _CHAT CHAT;
typedef struct _QUERY QUERY;
typedef struct _MESSAGE MESSAGE;
typedef struct _ADMIN ADMIN;


/* --- enums --- */

typedef enum _LOGIN__VALIDATION {
  LOGIN__VALIDATION__OK = 0,
  LOGIN__VALIDATION__IN_USE = 1,
  LOGIN__VALIDATION__INVALID = 2
} LOGIN__VALIDATION;
typedef enum _MESSAGE__NEXTMESSAGE {
  MESSAGE__NEXT__MESSAGE__CHAT = 0,
  MESSAGE__NEXT__MESSAGE__QUERY = 1,
  MESSAGE__NEXT__MESSAGE__DISC = 2
} MESSAGE__NEXTMESSAGE;
typedef enum _ADMIN__ACTION {
  ADMIN__ACTION__LOG = 0,
  ADMIN__ACTION__QUIT = 1,
  ADMIN__ACTION__DISC = 2
} ADMIN__ACTION;

/* --- messages --- */

struct  _LOGIN
{
  ProtobufCMessage base;
  char *username;
  protobuf_c_boolean has_validation;
  LOGIN__VALIDATION validation;
};
#define LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login__descriptor) \
    , NULL, 0,0 }


struct  _CHAT
{
  ProtobufCMessage base;
  char *message;
  protobuf_c_boolean has_id;
  int32_t id;
};
#define CHAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__descriptor) \
    , NULL, 0,0 }


struct  _QUERY
{
  ProtobufCMessage base;
  int32_t id_min;
  int32_t id_max;
  size_t n_messages;
  CHAT **messages;
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , 0, 0, 0,NULL }


struct  _MESSAGE
{
  ProtobufCMessage base;
  MESSAGE__NEXTMESSAGE next_message;
  CHAT *chat;
  QUERY *query;
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , 0, NULL, NULL }


struct  _ADMIN
{
  ProtobufCMessage base;
  ADMIN__ACTION action;
  char *log;
};
#define ADMIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&admin__descriptor) \
    , 0, NULL }


/* LOGIN methods */
void   login__init
                     (LOGIN         *message);
size_t login__get_packed_size
                     (const LOGIN   *message);
size_t login__pack
                     (const LOGIN   *message,
                      uint8_t             *out);
size_t login__pack_to_buffer
                     (const LOGIN   *message,
                      ProtobufCBuffer     *buffer);
LOGIN *
       login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login__free_unpacked
                     (LOGIN *message,
                      ProtobufCAllocator *allocator);
/* CHAT methods */
void   chat__init
                     (CHAT         *message);
size_t chat__get_packed_size
                     (const CHAT   *message);
size_t chat__pack
                     (const CHAT   *message,
                      uint8_t             *out);
size_t chat__pack_to_buffer
                     (const CHAT   *message,
                      ProtobufCBuffer     *buffer);
CHAT *
       chat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__free_unpacked
                     (CHAT *message,
                      ProtobufCAllocator *allocator);
/* QUERY methods */
void   query__init
                     (QUERY         *message);
size_t query__get_packed_size
                     (const QUERY   *message);
size_t query__pack
                     (const QUERY   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const QUERY   *message,
                      ProtobufCBuffer     *buffer);
QUERY *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (QUERY *message,
                      ProtobufCAllocator *allocator);
/* MESSAGE methods */
void   message__init
                     (MESSAGE         *message);
size_t message__get_packed_size
                     (const MESSAGE   *message);
size_t message__pack
                     (const MESSAGE   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const MESSAGE   *message,
                      ProtobufCBuffer     *buffer);
MESSAGE *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (MESSAGE *message,
                      ProtobufCAllocator *allocator);
/* ADMIN methods */
void   admin__init
                     (ADMIN         *message);
size_t admin__get_packed_size
                     (const ADMIN   *message);
size_t admin__pack
                     (const ADMIN   *message,
                      uint8_t             *out);
size_t admin__pack_to_buffer
                     (const ADMIN   *message,
                      ProtobufCBuffer     *buffer);
ADMIN *
       admin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   admin__free_unpacked
                     (ADMIN *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LOGIN_Closure)
                 (const LOGIN *message,
                  void *closure_data);
typedef void (*CHAT_Closure)
                 (const CHAT *message,
                  void *closure_data);
typedef void (*QUERY_Closure)
                 (const QUERY *message,
                  void *closure_data);
typedef void (*MESSAGE_Closure)
                 (const MESSAGE *message,
                  void *closure_data);
typedef void (*ADMIN_Closure)
                 (const ADMIN *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor login__descriptor;
extern const ProtobufCEnumDescriptor    login__validation__descriptor;
extern const ProtobufCMessageDescriptor chat__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCEnumDescriptor    message__next__message__descriptor;
extern const ProtobufCMessageDescriptor admin__descriptor;
extern const ProtobufCEnumDescriptor    admin__action__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_client_2dserver_2eproto__INCLUDED */
